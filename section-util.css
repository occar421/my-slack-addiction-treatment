/* assuming section heading contains [suppressor] suffix */
/* .p-channel_sidebar__static_list__item has `position:absolute` already */
/* As of 2024/01/04, CSS Nesting is not supported in Electron. */

@layer modification {
    @layer hide {
        /* hide section after "suppressor section" */
        .p-channel_sidebar__static_list__item:has(> .p-channel_sidebar__section_heading)[aria-label$=\[suppressor\]][aria-expanded=false] ~ .p-channel_sidebar__static_list__item {
            clip: rect(0 0 0 0);
        }

        /* hide unread banner */
        .p-channel_sidebar__banner--bottom.p-channel_sidebar__banner--unreads {
            clip: rect(0 0 0 0);
        }
    }

    /*noinspection CssUnresolvedCustomProperty*/
    @layer mute {
        body:has(.p-ia__nav__user > span > span > img:where([data-stringify-emoji=":mobile_phone_off:"])) :where(
        /* make channel plain unless with badge(mention) */
        .p-channel_sidebar__list .p-channel_sidebar__channel--unread:not(:has(> .p-channel_sidebar__channel_suffix > .p-channel_sidebar__badge)) .p-channel_sidebar__name,
        /* make section plain unless with badge(mention) */
        .p-channel_sidebar__list .p-channel_sidebar__section_heading--unreads:not(:has(> .p-channel_sidebar__section_heading_right .p-channel_sidebar__badge)) .p-channel_sidebar__section_heading_label--unreads
        ) {
            font-weight: unset !important;
            color: var(--dt_color-content-sec) !important;
        }

        body:has(.p-ia__nav__user > span > span > img:where([data-stringify-emoji=":mobile_phone_off:"])) :where(
        /* make section expander plain unless with badge(mention) */
        .p-channel_sidebar__list .p-channel_sidebar__section_heading--unreads:not(:has(> .p-channel_sidebar__section_heading_right .p-channel_sidebar__badge)) .p-channel_sidebar__section_heading_expand_container
        ) {
            color: var(--dt_color-content-sec) !important;
        }

        body:has(.p-ia__nav__user > span > span > img:where([data-stringify-emoji=":mobile_phone_off:"])) :where(
        /* make channel plain in popover menu unless with badge(mention) */
        .c-popover .p-section_menu .p-section_heading_context_menu__channel:not(:has(.c-mention_badge)) .c-channel_entity__name
        ) {
            font-weight: unset !important;
        }
    }

    @layer revert {
        /* if selected channel */
        .p-channel_sidebar__static_list__item:has(> .p-channel_sidebar__channel--selected),
            /* if expanded section */
        .p-channel_sidebar__static_list__item:has(> .p-channel_sidebar__section_heading)[aria-expanded=true],
            /* if collapsed section which has selected channel */
        .p-channel_sidebar__static_list__item:has(> .p-channel_sidebar__section_heading)[aria-expanded=false]:has(+ .p-channel_sidebar__static_list__item .p-channel_sidebar__channel.p-channel_sidebar__channel--selected),
            /* if mentioned channel & section */
        .p-channel_sidebar__static_list__item:has(.p-channel_sidebar__badge),
            /* if section which has mentioned channel */
        .p-channel_sidebar__static_list__item:has(> .p-channel_sidebar__section_heading):has(+ .p-channel_sidebar__static_list__item .p-channel_sidebar__channel .p-channel_sidebar__badge) {
            clip: initial;
        }
    }
}
